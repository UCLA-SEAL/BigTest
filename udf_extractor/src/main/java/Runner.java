import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Runner extends Logging {

    public static void main(String[] args) throws Exception {

        // Set this for now
        //Todo: In case of complete dataflow program this class file path will automatically generated by the tool using just the Spark App.
        String classfile = "/Users/malig/workspace/git/Test-Minimization-in-Big-Data/udf_extractor/target/scala-2.11/classes/WordCount$$anonfun$main$1";
        String mainArgs = "15";


        String outputJava = Configuration.JPF_HOME+ "jpf-symbc/src/examples/spf/";
        createDirectory(outputJava);
        String jpfJar = Configuration.JPF_HOME+ "jpf-core/build/RunJPF.jar";
        String classname = classfile.split("/")[classfile.split("/").length - 1];
        String classFile_jad = classname + ".jad";
        String jpfModel = Configuration.JPF_HOME+ "jpf-symbc/src/examples/spf/"+fixClassName(classname)+".jpf";


        // Decompile and extract the UDF
        // Compiling the newly extracted UDF
        UDFDecompilerAndExtractor udf_ex = new UDFDecompilerAndExtractor(classfile, classFile_jad, mainArgs, outputJava );
        udf_ex.ParseFilesInDir(jpfJar, jpfModel);

        // Run JPF on the UDF
        runCommand(new String[]{"java", "-jar", jpfJar, jpfModel}, Configuration.JAVA_RUN_DIR);
    }

    public static void createDirectory(String dir){
        File file = new File(dir);
        if(!file.exists()){
            loginfo(LogType.INFO, "Output directory does not exist: Creating one ...");
            file.mkdirs();
        }else{
            loginfo(LogType.INFO, "Output directory already exist");
        }
    }
    public static void runCommand(String[] args, String dir) {
// build the system command we want to run
        String s = "";
        for (String a : args) {
            s = s + "  " + a;
        }
         loginfo(LogType.INFO , "Running Command : " + s )  ;

        try {
            List<String> commands = new ArrayList<String>();
            commands.add("/bin/sh");
            commands.add("-c");
            commands.add(s);
            //commands.add("echo $JAVA_HOME");

            // execute the command
            SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands, dir);
            int result = commandExecutor.executeCommand();

            // get the stdout and stderr from the command that was run
            StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
            StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();

            // print the stdout and stderr
            loginfo(LogType.INFO , stdout.toString());
            loginfo(LogType.WARN , stderr.toString());
 } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String fixClassName(String s){
       return  s.replace("$" , "");
    }
}

