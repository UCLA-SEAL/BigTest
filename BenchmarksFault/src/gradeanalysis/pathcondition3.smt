(set-logic QF_ASNIA)
(set-option :produce-models true)


(define-fun isinteger ((x!1 String)) Bool
(or (str.in.re x!1 (  re.++ (str.to.re "-") (re.+ (re.range "0" "9")))) (str.in.re x!1 (re.+ (re.range "0" "9"))) )
)      

(define-fun notinteger ((x!1 String)) Bool
(not (isinteger x!1))
)

(declare-fun a_t2_P2 () Int)
(declare-fun line_P21 () String)
(declare-fun x4_1_P2 () String)
(declare-fun x3_2_P2 () Int)
(declare-fun x6 () (Array Int Int))
(declare-fun x5_2_P1 () Int)
(declare-fun line_P2 () String)
(declare-fun x2_P1 () String)
(declare-fun I15b1 () Int)
(declare-fun I15b0 () Int)
(declare-fun x9_1 () String)
(declare-fun x4_2_P1 () Int)
(declare-fun a_t1_P2 () String)
(declare-fun v_t1 () String)
(declare-fun x9_2 () Int)
(declare-fun x3_1_P1 () String)
(declare-fun x1_P2 () String)
(declare-fun l_P1 () String)
(declare-fun x1_P1 () String)
(declare-fun line_P1 () String)
(declare-fun a () (Array Int Int))
(declare-fun x5_1_P1 () String)
(declare-fun x0_P1 () String)
(declare-fun l_P11 () String)
(declare-fun x4_2_P2 () Int)
(declare-fun x8 () (Array Int Int))
(declare-fun line_P10 () String)
(declare-fun x4_1_P1 () String)
(declare-fun l_P21 () String)
(declare-fun l_P2 () String)
(declare-fun x7 () Int)
(declare-fun x2_P2 () String)
(declare-fun x5_1 () String)
(declare-fun x0_P2 () String)
(declare-fun a_t2_P1 () Int)
(declare-fun x5_1_P2 () String)
(declare-fun a_t1_P1 () String)
(declare-fun v_t2 () Int)
(declare-fun x3_2_P1 () Int)
(declare-fun I15b_length () Int)
(declare-fun x3_1_P2 () String)
(declare-fun l_P10 () String)
(declare-fun x5_2_P2 () Int)
(declare-fun l_P20 () String)


(assert (= l_P1 (str.++ (str.++ l_P10 ":"  )  l_P11))) 
(assert (= line_P2 (str.++ (str.++ " " ","  )  line_P21))) 
(assert (= l_P2 (str.++ (str.++ l_P20 ":"  )  l_P21))) 
(assert (= line_P1 line_P10)) 
(assert  (and (<=  v_t2 40 )  (and (=  v_t2 x9_2 )  (and (=  v_t1 x9_1 )  (and (=  line_P1 x0_P1 )  (and (isinteger  l_P11 )  (and (=  l_P1 x2_P1 )  (and (>  a_t2_P1 40 )  (and (=  a_t1_P1 x4_1_P1 )  (and (=  a_t2_P1 x4_2_P1 )  (and (=  line_P2 x0_P2 )  (and (isinteger  l_P21 )  (and (=  l_P2 x2_P2 )  (and (>  a_t2_P2 40 )  (and (=  a_t1_P2 x4_1_P2 )  (and (=  a_t2_P2 x4_2_P2 )  (and (=  ( select  a 1 ) I15b1 )  (and (>=  1 0 )  (and (<  1 I15b_length )  (and (=  ( select  a 0 ) I15b0 )  (and (>=  0 0 )  (and (<  0 I15b_length )  (and (>=  I15b_length 0 ) (=  a x6 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(assert  (and (=  x5_2_P1 ( select  x8 0 ) )  (and (=  x5_2_P2 ( select  x8 1 ) )  (and (=  x1_P1 line_P10 )  (and (=  x2_P1 x1_P1 )  (and (=  x3_1_P1 l_P10 )  (and (=  x3_2_P1 ( str.to.int  l_P11  ) )  (and (=  x4_1_P1 x3_1_P1 )  (and (=  x4_2_P1 x3_2_P1 )  (and (=  x5_1_P1 ( str.++  a_t1_P1  " Pass"  ) )  (and (=  x5_2_P1 1 )  (and (=  x1_P2 line_P21 )  (and (=  x2_P2 x1_P2 )  (and (=  x3_1_P2 l_P20 )  (and (=  x3_2_P2 ( str.to.int  l_P21  ) )  (and (=  x4_1_P2 x3_1_P2 )  (and (=  x4_2_P2 x3_2_P2 )  (and (=  x5_1_P2 ( str.++  a_t1_P2  " Pass"  ) )  (and (=  x5_2_P2 1 )  (and (=  x6 x8 )  (and (=  x7 (+  I15b1 I15b0 ) )  (and (=  x9_1 x5_1 ) (=  x9_2 x7 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
